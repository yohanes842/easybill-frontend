pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = "ir.arv.cx"
        DOCKER_IMAGE_NAME = "${DOCKER_REGISTRY}/yohanes842/easybill-frontend"
        WEBHOOK_URL = credentials('easybill-webhook-url');
    }
    stages {
        stage("Project and build information") {
            steps {
                script {
                    def projectMetadata = readJSON file: 'package.json'
                    env.EASYBILL_VERSION = projectMetadata['version']
                    echo "== Easybill Frontend =="
                    echo "Project version: ${env.EASYBILL_VERSION}"
                    echo "Branch: ${env.BRANCH_NAME}"
                    echo "Building ${DOCKER_IMAGE_NAME}"
                }
            }
        }
        stage("Build image") {
            steps {
                script {
                    image = docker.build("${DOCKER_IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }
        stage("Push image") {
            steps {
                script {
                    tags = []
                    docker.withRegistry("https://${env.DOCKER_REGISTRY}", "private-image-registry") {
                        if (env.BRANCH_NAME == "master"){
                            tags.addAll("- `${EASYBILL_VERSION}`", "- `latest`")
                            image.push("${EASYBILL_VERSION}")
                            image.push("latest")
                        } else if (env.BRANCH_NAME == "dev") {
                            tags.addAll("- `dev-${EASYBILL_VERSION}`", "- `dev-latest`")
                            image.push("dev-${EASYBILL_VERSION}")
                            image.push("dev-latest")
                        } else {
                            def sanitizeBranchName = env.BRANCH_NAME.replace("feat/", "")
                            tags.addAll("- `${sanitizeBranchName}-${EASYBILL_VERSION}`", "- `${sanitizeBranchName}-latest`")
                            image.push("${sanitizeBranchName}-${EASYBILL_VERSION}")
                            image.push("${sanitizeBranchName}-latest")
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                discordSend(
                    webhookURL: WEBHOOK_URL,
                    result: currentBuild.currentResult,
                    showChangeset: true,
                    description: "**Branch:** ${env.BRANCH_NAME}\n**Build:** ${BUILD_NUMBER}\n\n**Image:** `${env.DOCKER_IMAGE_NAME}`**Tags:**\n${tags.join('\n')}\n\n",
                    link: env.BUILD_URL, title: "${JOB_NAME} #${BUILD_NUMBER}"
                )
            }
        }
    }
}